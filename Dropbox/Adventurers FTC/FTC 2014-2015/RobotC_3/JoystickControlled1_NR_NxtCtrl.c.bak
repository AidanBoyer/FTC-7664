#pragma config(Hubs,  S1, MatrxRbtcs, none,     none,     none)
#pragma config(Hubs,  S2, MatrxRbtcs, none,     none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Motor,  motorA,           ,             tmotorNXT, openLoop)
#pragma config(Motor,  motorB,           ,             tmotorNXT, openLoop)
#pragma config(Motor,  motorC,           ,             tmotorNXT, openLoop)
#pragma config(Motor,  mtr_Matrix_S1_1, RightFrontDrive, tmotorMatrix, PIDControl, encoder)
#pragma config(Motor,  mtr_Matrix_S1_2, RightRearDrive, tmotorMatrix, PIDControl, encoder)
#pragma config(Motor,  mtr_Matrix_S1_3, LeftFrontDrive, tmotorMatrix, PIDControl, reversed, encoder)
#pragma config(Motor,  mtr_Matrix_S1_4, LeftRearDrive, tmotorMatrix, PIDControl, reversed, encoder)
#pragma config(Motor,  mtr_Matrix_S2_1, LiftMotorRight, tmotorMatrix, PIDControl, encoder)
#pragma config(Motor,  mtr_Matrix_S2_2, motorI,        tmotorMatrix, openLoop)
#pragma config(Motor,  mtr_Matrix_S2_3, LiftMotorLeft, tmotorMatrix, PIDControl, encoder)
#pragma config(Motor,  mtr_Matrix_S2_4, GathererMotor, tmotorMatrix, openLoop, encoder)
#pragma config(Servo,  srvo_Matrix_S1_1, servo1,               tServoNone)
#pragma config(Servo,  srvo_Matrix_S1_2, servo2,               tServoNone)
#pragma config(Servo,  srvo_Matrix_S1_3, servo3,               tServoNone)
#pragma config(Servo,  srvo_Matrix_S1_4, servo4,               tServoNone)
#pragma config(Servo,  srvo_Matrix_S2_1, RollingGoalGripperRight, tServoStandard)
#pragma config(Servo,  srvo_Matrix_S2_2, servo6,               tServoNone)
#pragma config(Servo,  srvo_Matrix_S2_3, RollingGoalGripperLeft, tServoStandard)
#pragma config(Servo,  srvo_Matrix_S2_4, servo8,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "joystickDriver.c"

int scaledJoyDrive(int i_joyY)
{
	// add Y offset to the joystick input and scale to 100; handle both positive and negative
	const float Yoffset = 13;
	// create a dead zone
	const int joyDead = 7;

	float joyY;
	int scaledY;
	joyY = (float)i_joyY;
	// part after "?" is positive joyY; part after ":" handles negative joyY
	if (abs(joyY)<joyDead)
	{
		scaledY = 0;
	}
  else
  {
  	scaledY = (joyY>0) ? (int)(  (joyY + Yoffset) / (127 + Yoffset) * 100  ) : (int)((joyY - Yoffset) / (-128 - Yoffset) * -100);
  }

	return scaledY;
}

task main()
{
	const int RGGRightUp = 255;
	const int RGGLeftUp = 0;
	const int RGGRightDown = 19;
	const int RGGLeftDown = 226;

	int LeftRearDriveValue;
	int RightRearDriveValue;
	int LeftFrontDriveValue;
	int RightFrontDriveValue;

	bool driveReversed = false;

	nMotorEncoder[motorA] = 0;
	nMotorEncoder[motorB] = 0;

	waitForStart();

	motor[motorA] = 25;
	motor[motorB] = 25;

	while(true) // infinite loop:
	{
		getJoystickSettings(joystick); // update buttons and joysticks

		LeftRearDriveValue = scaledJoyDrive(joystick.joy1_y1);
		RightRearDriveValue = scaledJoyDrive(joystick.joy1_y2);
		LeftFrontDriveValue = scaledJoyDrive(joystick.joy1_y1);
		RightFrontDriveValue = scaledJoyDrive(joystick.joy1_y2);


		switch (joystick.joy1_TopHat)
    {
    case 0:
      LeftRearDriveValue =  100;
	 		RightRearDriveValue = 100;
  		LeftFrontDriveValue =  100;
  		RightFrontDriveValue = 100;
      break;
    case 4:
      LeftRearDriveValue =  -100;
	 		RightRearDriveValue = -100;
  		LeftFrontDriveValue =  -100;
  		RightFrontDriveValue = -100;
      break;
    case 6:
      LeftRearDriveValue =  -50;
	 		RightRearDriveValue = 50;
  		LeftFrontDriveValue =  -50;
  		RightFrontDriveValue = 50;
      break;
    case 2:
      LeftRearDriveValue =  50;
	 		RightRearDriveValue = -50;
  		LeftFrontDriveValue =  50;
  		RightFrontDriveValue = -50;
      break;
    }

		if(joy1Btn(6) == 0)
		{

			LeftRearDriveValue = LeftRearDriveValue / 2;
			RightRearDriveValue = RightRearDriveValue / 2;
			LeftFrontDriveValue = LeftFrontDriveValue / 2;
			RightFrontDriveValue = RightFrontDriveValue / 2;
		}

		if(joy1Btn(5) == 1)
		{
			if(driveReversed == false) {driveReversed = true;}
			else {driveReversed = false;}
		}

		if(driveReversed == true)
		{
			int RR = RightRearDriveValue;
			int LR = LeftRearDriveValue;
			int RF = RightFrontDriveValue;
			int LF = LeftFrontDriveValue;

			LeftRearDriveValue = RR * -1;
			RightRearDriveValue = LR * -1;
			LeftFrontDriveValue = RF * -1;
			RightFrontDriveValue = LF * -1;
		}

		motor[LeftRearDrive] = LeftRearDriveValue;
  	motor[RightRearDrive] = RightRearDriveValue;
 	  motor[LeftFrontDrive] = LeftFrontDriveValue;
  	motor[RightFrontDrive] = RightFrontDriveValue;

		if(joy1Btn(2) == 1)
  		{
			nMotorEncoderTarget[motorA] = 180;
			nMotorEncoderTarget[motorB] = 180;
		}
		if(joy1Btn(4) == 1)
		{
			nMotorEncoderTarget[motorA] = 1; //0 means run forever
			nMotorEncoderTarget[motorB] = 1;
		}

		if(joy1Btn(1) == 1)
		{
			motor[GathererMotor]	= -100;
		}
		else
		{
			motor[GathererMotor]	= 0;
		}
	}
}
